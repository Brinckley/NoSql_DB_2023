x-api-config: &api-config
  build: BookAndLive
  env_file:
    - BookAndLive\env\docker.env
  depends_on:

    mongo_cluster_init:
      condition: service_completed_successfully

    elasticsearch_node_01:
      condition: service_healthy
    elasticsearch_node_02:
      condition: service_healthy

    memcached_client_node_01:
      condition: service_healthy
    memcached_client_node_02:
      condition: service_healthy
    memcached_client_node_03:
      condition: service_healthy
    memcached_room_node_01:
      condition: service_healthy
    memcached_room_node_02:
      condition: service_healthy
    memcached_room_node_03:
      condition: service_healthy
    memcached_reservation_node_01:
      condition: service_healthy
    memcached_reservation_node_02:
      condition: service_healthy
    memcached_reservation_node_03:
      condition: service_healthy

x-mongodb-healthcheck: &mongodb-healthcheck
  healthcheck:
    test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/test --quiet
    interval: 10s
    timeout: 10s
    retries: 5
    start_period: 40s

x-elasticsearch-healthcheck: &elasticsearch-healthcheck
  healthcheck:
    interval: 5s
    retries: 80
    test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://127.0.0.1:9200

x-memcached-healhcheck: &memcached-healhcheck
  healthcheck:
    test: echo stats | nc 127.0.0.1 11211
    interval: 10s
    retries: 60

services:

  api_node_01:
    <<: [ *api-config ]

  api_node_02:
    <<: [ *api-config ]

  api_node_03:
    <<: [ *api-config ]

  mongo_db_node_01:
    image: mongo:7.0.2
    ports:
      - 27017:27017
    <<: [ *mongodb-healthcheck ]
    volumes:
      - ./data/mongo_node_01:/data/db
    command: mongod --replSet docker-replicaset
    ports:
      - 27017:27017

  mongo_db_node_02:
    ports:
      - 27018:27018
    image: mongo:7.0.2
    <<: [ *mongodb-healthcheck ]
    volumes:
      - ./data/mongo_node_02:/data/db
    command: mongod --replSet docker-replicaset

  mongo_cluster_init:
      image: mongo:7.0.2
      depends_on:
        mongo_db_node_01:
          condition: service_healthy
        mongo_db_node_02:
          condition: service_healthy
      volumes:
        - ./BookAndLive/env/init-mongo.js:/scripts/init-mongo.js:ro
      entrypoint: [ "mongosh", "--host", "mongo_db_node_01", "--file", "/scripts/init-mongo.js"]

  elasticsearch_node_01:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healthcheck ]
    environment:
      - node.name=elasticsearch_node_01
      - discovery.seed_hosts=elasticsearch_node_02
    env_file:
      - BookAndLive/env/elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_01:/usr/share/elasticsearch/data

  elasticsearch_node_02:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healthcheck ]
    environment:
     - node.name=elasticsearch_node_02
     - discovery.seed_hosts=elasticsearch_node_01
    env_file:
      - BookAndLive/env/elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_02:/usr/share/elasticsearch/data

#  kibana:
#    image: kibana:8.10.2
#    ports:
#      - 5601:5601
#    volumes:
#      - ./data/kibana:/usr/share/kibana/data
#    environment:
#      ELASTICSEARCH_HOSTS: '["http://elasticsearch_node_01:9200","http://elasticsearch_node_02:9200"]'
#    depends_on:
#      elasticsearch_node_01:
#        condition: service_healthy
#      elasticsearch_node_02:
#        condition: service_healthy
#      elasticsearch_node_03:
#        condition: service_healthy

  redis:
    image: redislabs/redismod
    ports:
      - '6379:6379'

  memcached_client_node_01:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_client_node_02:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_client_node_03:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_room_node_01:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_room_node_02:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_room_node_03:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_reservation_node_01:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_reservation_node_02:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  memcached_reservation_node_03:
    image: memcached:alpine
    <<: [ *memcached-healhcheck ]

  nginx:
    image: nginx
    ports:
      - 80:80
    depends_on:
      - api_node_01
      - api_node_02
      - api_node_03
    volumes:
      - ./data/nginx/cache:/data/nginx/cache
      - ./BookAndLive/env/nginx.conf:/etc/nginx/nginx.conf:ro
